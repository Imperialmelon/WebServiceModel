import asyncio
import random
import time
from typing import Any
from app.store.database import db
from app.logger import logger as context_logger


class DBCluster:
    """–ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Å master-slave —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π."""

    def __init__(self,
                 name: str,
                 master: db.Database,
                 replicas: list[db.Database],
                 replication_delay: float = 0.1):
        self.name = name
        self.master = master
        self.replicas = replicas
        self.replication_delay = replication_delay
        self.failed_masters = []
        self.current_master = master
        self.failover_in_progress = False

    async def replicate(self, key: str, value: Any):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–ª–µ–π–≤—ã."""
        await asyncio.sleep(self.replication_delay)
        logger = context_logger.get_logger()
        for replica in self.replicas:
            if replica.available:
                try:
                    await replica.put(key, value)
                except Exception as e:
                    logger.error(e)

        
        logger.info(f"üîÑ –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –∫–ª—é—á–∞ '{key}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def write(self, key: str, value: str):
        """–ó–∞–ø–∏—Å—å –≤ master –∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è."""
        if not self.current_master.available:
            await self.failover()
        await self.current_master.put(key, value)
        asyncio.create_task(self.replicate(key, value))

    async def read(self, key: str):
        """–ß—Ç–µ–Ω–∏–µ ‚Äî —á–∞—â–µ –∏–∑ —Ä–µ–ø–ª–∏–∫–∏, –∏–Ω–æ–≥–¥–∞ –∏–∑ master."""
        if random.random() < 0.7 and self.replicas:
            replica = random.choice(self.replicas)
            if replica.available:
                return await replica.get(key)
        return await self.current_master.get(key)

    async def failover(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é master-–Ω–æ–¥—É."""
        if self.failover_in_progress:
            return

        logger = context_logger.get_logger()
        self.failover_in_progress = True
        logger.warning(
            f"‚ö†Ô∏è Master {
                self.current_master.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º failover")

        available_replicas = [
            replica for replica in self.replicas if replica.available]
        if not available_replicas:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫ –¥–ª—è failover!")
            self.failover_in_progress = False
            raise Exception("–í—Å–µ —É–∑–ª—ã –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        new_master = random.choice(available_replicas)
        self.replicas.remove(new_master)
        self.replicas.append(self.current_master)
        self.failed_masters.append(self.current_master)
        self.current_master = new_master

        logger.info(f"‚úÖ –†–µ–ø–ª–∏–∫–∞ {new_master.name} —Å—Ç–∞–ª–∞ –Ω–æ–≤—ã–º master")
        self.failover_in_progress = False

    async def monitor_master(self, interval: float = 5.0):
        """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ master –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π failover."""
        logger = context_logger.get_logger()
        while True:
            await asyncio.sleep(interval)
            if not self.current_master.available:
                try:
                    await self.failover()
                except Exception:
                    logger.warning(f"–ö–ª–∞—Å—Ç–µ—Ä {self.name} –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            recovered = [m for m in self.failed_masters if m.available]
            if recovered:
                old_master = recovered.pop()
                logger.info(
                    f"üîÅ –°—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä {
                        old_master.name} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ–ª—å —Ä–µ–ø–ª–∏–∫–∏")
                self.failed_masters.remove(old_master)
                self.replicas.append(old_master)
